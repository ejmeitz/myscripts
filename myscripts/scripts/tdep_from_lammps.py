import numpy as np
import os
from pathlib import Path
from typing import Annotated

def remove_dump_headers(simulation_folder,tdep_folder):
    bash_script = f""" #!/bin/bash

        # figure out how many atoms there are
        na=`head -n 4 dump.forces | tail -n 1`
        # remove the header from the stat file
        grep -v '^#' dump.stat > ./{tdep_folder}/infile.stat
        # figure out how many timesteps there are
        nt=`wc -l ./{tdep_folder}/infile.stat"""
    
    bash_script_end = """| awk '{print $1}'`
    
        # create the positions and force files
        [ -f infile.forces ] && rm infile.forces
        [ -f infile.positions ] && rm infile.positions
        for t in `seq 1 ${nt}`
        do
            nl=$(( ${na}+9))
            nll=$(( ${nl}*${t} ))
            echo "t ${t} ${nl} ${nll}"
            head -n ${nll} dump.forces | tail -n ${na} >> infile.forces
            head -n ${nll} dump.positions | tail -n ${na} >> infile.positions
            head -n ${nll} dump.positions_unrolled | tail -n ${na} >> infile.positions_unrolled
        done

        head -n ${nll} equilibrium.atom | tail -n ${na} >> infile.eq_positions
    """

    bash_script += bash_script_end

    bash_file = os.path.join(simulation_folder, "remove_dump_headers")
    with open(bash_file, "w") as f:
        f.write(bash_script)
    
    os.chdir(simulation_folder)
    os.system(f"chmod u+x {bash_file}")
    os.system(f"{bash_file}")

#Assumes mono-atomic, most issues in generating infile.ssposcar automatically
def parse_MD_data(simulation_folder, n_unit_cells, temperature, dt_fs, recalc_files, stride, N_steps):

    if not os.path.isdir(simulation_folder):
        raise RuntimeError(f"Simulation folder is not a valid directory: {simulation_folder}")
    
    old_files = {
        "infile.positions",
        "infile.forces",
        "infile.positions_unrolled",
        "infile.eq_positions"
    }

    #Delete old files generated by remove_dump_headers
    if recalc_files:
        for file in old_files:
            if os.path.isfile(os.path.join(simulation_folder, file)):
                os.system(f"rm -rf {os.path.join(simulation_folder, file)}")

    # Check if required files are present
    required_files = {
        "Eq Position Dump" : "equilibrium.atom", #dump with cols: id type xs ys zs mass (sorted by id)
        "Eq Energy" : "equilibrium.energies", #fix print with cols: timestep temperature PE KE (for equilibrium structure)
        "Posn Dump" : "dump.positions", #dump with cols: id xs ys zs (sorted by id)
        "Unrolled Posn Dump" : "dump.positions_unrolled", #dump with cols id xsu ysu zsu (sorted by id)
        "Force Dump" : "dump.forces",  #dump with cols: id fx fy fz (sorted by id)
        "Unit cell" : "infile.ucposcar"
    }

    for file in required_files.values():
        if not os.path.isfile(os.path.join(simulation_folder, file)):
            raise RuntimeError(f"Expected {file} in simulation folder")
        
    #Make new directory for TDEP data
    tdep_folder = f"TDEP_data{stride}"
    TDEP_folder = os.path.join(simulation_folder, tdep_folder)
    os.mkdir(TDEP_folder)
    
    if recalc_files:
        remove_dump_headers(simulation_folder, tdep_folder)

    #Strip first col from data
    posn_data = np.loadtxt(os.path.join(simulation_folder, "infile.positions"), usecols = [1,2,3])
    force_data = np.loadtxt(os.path.join(simulation_folder, "infile.forces"), usecols= [1,2,3])
    eq_posns = np.loadtxt(os.path.join(simulation_folder, "infile.eq_positions"), usecols = [2,3,4])

    #Save parsed files to TDEP folder
    np.savetxt(os.path.join(TDEP_folder, "infile.positions"), posn_data, fmt = "%.15f")
    np.savetxt(os.path.join(TDEP_folder, "infile.forces"), force_data, fmt = "%.15f")
    np.savetxt(os.path.join(TDEP_folder, "infile.eq_positions"), eq_posns, fmt = "%.15f")


    # Parse ucposcar
    with open(os.path.join(simulation_folder, required_files["Unit cell"]), "r") as f:
        uc_data = f.readlines()
        lattice_param = float(uc_data[1].strip())
        lattice_vecs = uc_data[2:5]
        species = uc_data[5].strip().split()

    if len(species) != 1:
        raise RuntimeError("More than one species, cannot construct ssposcar automatically.")

    #Move ucposcar to TDEP
    os.system(f"cp {os.path.join(simulation_folder, required_files['Unit cell'])} {os.path.join(TDEP_folder, required_files['Unit cell'])}")

    #Build infile.ssposcar
    box_size = lattice_param*n_unit_cells
    N_atoms = len(eq_posns)

    #Build super-cell poscar
    with open(os.path.join(TDEP_folder, "infile.ssposcar"), "w") as f:
        f.write(f"{species[0]} FCC\n")
        f.write(f"{box_size}\n")
        f.write(lattice_vecs[0])
        f.write(lattice_vecs[1])
        f.write(lattice_vecs[2])
        f.write(f"{species[0]}\n")
        f.write(f"{N_atoms}\n")
        f.write("Direct\n")
        
        for row in eq_posns:
            f.write(f"{row[0]:.10f} {row[1]:.10f} {row[2]:.10f}\n")

    #Build infile.meta
    with open(os.path.join(TDEP_folder, "infile.meta"), "w") as f:
        f.write(f"{N_atoms} # N atoms\n")
        f.write(f"{N_steps} # N timesteps\n")
        f.write(f"{dt_fs} # timestep in fs\n")
        f.write(f"{temperature} # temperature in K\n")

    return TDEP_folder

def run_TDEP(TDEP_folder, n_threads, r_cut2, r_cut3, r_cut4, stride):
    required_files = {
        "Force Dump" : "infile.forces",
        "Position Dump" : "infile.positions",
        "ucposcar" : "infile.ucposcar",
        "ssposcar" : "infile.ssposcar",
        "meta" : "infile.meta",
        "stat" : "infile.stat"
    }

    for file in required_files.values():
        if not os.path.isfile(os.path.join(TDEP_folder, file)):
            raise RuntimeError(f"Expected {file} in TDEP folder")
    
    os.chdir(TDEP_folder)
    os.system(f"mpirun -np {n_threads} extract_forceconstants -rc2 {r_cut2} -rc3 {r_cut3} -rc4 {r_cut4} -s {stride} --potential_energy_differences --verbose > tdep.log")
    os.system("cp infile.ssposcar infile.newposcar")
    os.system("mv outfile.forceconstant infile.forceconstant")
    os.system("mv outfile.forceconstant_thirdorder infile.forceconstant_thirdorder")
    os.system(f"remap_forceconstant")

def run(temp, dt_fs, num_unit_cell, path, num_threads, r_cut2, r_cut3, r_cut4, recalc_files, stride, nsteps):
    TDEP_folder = parse_MD_data(path, num_unit_cell, temp, dt_fs, recalc_files, stride, nsteps)
    run_TDEP(TDEP_folder, num_threads, r_cut2, r_cut3, r_cut4, stride)

def tdep_from_lammps(
    temperature : float,
    timestep_fs : float,
    num_unit_cell : int,
    path : Path,
    ucposcar_path : Path,
    num_threads : int,
    nsteps : int,
    r_cut2 : float,
    r_cut3 : float,
    r_cut4 : float = -1,
    make_input_files : bool = True,
    stride : int = 1,
):
    """
    Calculates force constants from LAMMPS output. Assumes system is monoatomic. 
    """

    os.system(f"cp {ucposcar_path} {os.path.join(path, 'infile.ucposcar')}")

    run(temperature, timestep_fs, num_unit_cell,
         path, num_threads, r_cut2, r_cut3, r_cut4, make_input_files, stride, nsteps)
