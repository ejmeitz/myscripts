from pathlib import Path
from typing import List

from myscripts.src import LAMMPS_Project

def setup(
        infile_path : Path,
        base_path : Path,
        project_name : str,
        param_combos,
        n_runs : int, 
        seed_var_names : List[str]
    ):

    project = LAMMPS_Project(project_name, infile_path, base_path)
    param_names = param_combos[0]

    for pc in param_combos[1:]:
        job_name = ""
        data = {}
        for i in range(len(pc)):
            data[param_names[i]] = pc[i]
            if i == len(pc) - 1:
                job_name += f"{param_names[i]}{i}"
            else:
                job_name += f"{param_names[i]}{i}_"

        project.new_job(job_name, n_runs, seed_var_names, data)

    return project

def main(
    infile_path: Path,
    base_path: Path,
    project_name: str,
    ncores: int,
    np: int,
    n_seeds: int,
    param_combos: dict,
    lmp_command: str = "lmp",
    seed_var_names: List[str] = ["velocity_seed"]
):
    """
    Parameters:
    - infile_path: Path to the LAMMPS input file
    - base_path: Path to the directory where the project will be saved
    - project_name: Name of the project
    - ncores: Number of cores to split jobs over
    - np: Number of MPI ranks per process
    - n_seeds: Number of seeds per job
    - param_combos: Dictionary of parameter combinations generated by `make_param_combos`
    - lmp_command: Command to run LAMMPS (e.g. lmp)
    - seed_var_names: List of variable names in the LAMMPS input file
         that will be used to set random seeds (e.g. "velocity_seed" or "langevin_seed")
    """
    
    proj = setup(infile_path, base_path, project_name , param_combos, n_seeds, seed_var_names)
    proj.run_all_jobs_mpi(ncores, np, lammps_env_var = lmp_command)

